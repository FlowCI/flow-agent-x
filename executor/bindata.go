// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// wait-for-it.sh
package executor

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _waitForItSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x53\xeb\x36\x10\x7d\xd7\xaf\x38\x15\x2e\x03\x99\xba\xc1\x99\xe9\x4b\x82\xd3\x32\x25\x43\x79\xa0\x69\x21\x79\xe2\x66\x2e\xc6\x5e\x63\x0d\x89\x94\x58\x6b\xbe\xf9\xef\x77\x24\x2b\x21\x70\x2f\x33\x37\x2f\xb1\xa5\xf5\xee\x39\x67\xcf\xee\xce\x2f\xdd\x6b\xa5\xbb\xb6\x12\x62\x72\x7a\x36\x1a\x4f\x27\x69\xf2\x87\xf8\x7f\x7a\x3a\x9a\xa4\x07\x42\x50\x5e\x19\xaa\xeb\xbd\x7d\x3c\x0b\x40\x95\xb8\x84\x8c\xfc\xad\x44\xac\x09\x09\x66\x03\x70\x45\x1a\xcb\x5a\x69\x2e\x21\x7f\xb5\x5f\xb4\x84\x8c\x3a\x12\xc9\x70\xb7\x37\x40\xa9\xc4\xab\x10\x8d\xcd\x6e\x28\xa4\xa1\x07\xc5\xb9\x29\x28\x95\x51\x22\x05\x90\x67\x8c\xc3\x43\x4c\x2f\x8e\x4e\x46\x18\xee\xf6\xc4\xd4\x05\xf7\x05\x10\xe5\x8b\x42\x67\x0b\x42\x65\x2c\xf7\x97\xa6\x66\x5c\xc6\x0c\x56\x0b\x32\x0d\xcf\x70\x19\xc7\xc8\xcd\x62\x91\xe9\x02\x59\x7d\x63\x67\x02\x88\x57\x78\x41\x1c\xaf\x1a\x45\x8c\x4f\x7e\xc7\x06\xda\x30\x4c\xc3\xcb\x86\x91\xe9\x47\x58\xce\xb8\xb1\x58\x90\x75\xb5\xad\xcb\xc3\x08\x8a\xf8\x7c\xa1\x66\x1a\xfe\xdb\x3c\x93\xf0\xa2\x34\x2c\xe5\x46\x17\xf6\x37\x3c\x51\x6d\x50\x9a\x1a\xda\xac\x81\xba\x6c\x31\xfe\x1e\x9f\x9d\x1d\xfd\x7b\x8c\xa3\xf3\x93\x8b\x1f\xa2\x1a\x3d\x50\xde\x30\x6d\x18\xdd\x2b\xae\x3c\x2d\x64\x25\x53\xed\x74\x06\x93\x65\x94\x4a\x2b\x5b\x91\x15\x5e\xb2\xa0\x28\x64\xb4\x16\x56\x3a\xc5\xef\x33\xc5\x5f\x4b\xb3\xee\x9d\x43\xa4\x1c\xd0\x2b\x4b\x2b\x44\x81\xda\x15\x06\x28\x8c\x70\xd5\x75\x8e\xf8\x09\x32\xfa\x67\x7c\x31\x71\x0d\xfc\x6f\x7c\x3e\x91\x18\xa2\x5b\xd0\x5d\x57\x37\xf3\x39\x7a\xc3\xdd\x44\xf8\xd8\x9a\x6c\x33\xe7\x34\xfa\xd3\xbf\x79\x5b\x44\xed\x19\x62\x5a\xe1\x00\x33\xb4\xb6\x10\x2d\xb3\x36\x62\x07\xf1\x0d\x7f\x7f\xe9\xe0\x53\x0e\x19\xfd\x25\xc3\x49\xa9\xc4\xfa\x42\x31\x0e\xc4\xd6\x99\x9d\x13\x2d\x91\x08\xa0\x30\x9a\x1c\xf5\xbc\x32\x90\xe3\x25\xd5\x19\x2b\xa3\xbd\xe4\x85\xeb\xac\xf4\x56\x0a\x39\x12\xaf\x48\xa5\xe6\xf4\x0e\x88\xf0\xdc\xf3\xcc\x12\x9c\x17\xa1\x5a\x4c\x9d\x7e\x07\xfb\xfe\xc9\x89\x91\x46\x7b\x1f\xcd\x9d\xc8\x17\xe4\x0d\x23\x2e\xd0\x47\x5c\x22\x69\xa3\x9d\x64\x3f\x11\xdd\x6b\xa3\x6d\xa5\x4a\xf6\x54\x80\xc1\xc0\xff\x6d\x7b\xb7\x0d\x6a\x27\x31\xf9\xf4\x83\x10\xb6\x9e\x5d\x19\xf5\xe4\x5b\x4f\xe4\xba\xcd\x12\x29\xa4\xdc\xcc\xea\x75\x4d\xd9\xed\x60\x23\xa9\x4f\xdb\x7b\x97\x76\x63\xf7\xce\xc7\xfc\xcf\xc9\x4e\x27\x7d\x95\x9f\x02\x8a\xb7\xc8\xf9\x27\x5f\xec\x7d\x48\x45\xf3\x65\x1b\xe6\xd7\x42\xe8\x70\xb8\x0e\x15\xc3\xe6\x81\x9c\xea\x5b\x6d\xee\xb5\x1b\x84\x66\x41\x9a\xfb\x68\xb7\xc6\xfa\xe3\xad\xf2\x64\xb3\x5c\x78\x5f\x88\xc0\xbf\x35\xb3\x27\x1f\x9b\x8d\xa9\xb7\xc5\x10\x5b\xa5\x46\x75\x6d\xea\x3e\x1e\x4d\x03\x4d\x54\x80\x0d\x96\xb5\xb9\x53\x05\x21\xf3\x2b\x08\x6e\x2c\xfd\x1a\x62\xe3\x47\xf1\x77\x87\xa4\xc5\xd1\x13\xa5\x7a\x9b\x3a\x6f\xe7\x6f\x01\x00\x00\xff\xff\xcf\xbf\x7a\xcc\x5d\x05\x00\x00")

func waitForItShBytes() ([]byte, error) {
	return bindataRead(
		_waitForItSh,
		"wait-for-it.sh",
	)
}

func waitForItSh() (*asset, error) {
	bytes, err := waitForItShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wait-for-it.sh", size: 1373, mode: os.FileMode(493), modTime: time.Unix(1595283913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wait-for-it.sh": waitForItSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wait-for-it.sh": &bintree{waitForItSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
