// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// wait-for-it.sh
package executor

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _waitForItSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6d\x53\xe3\xc8\x11\xfe\xae\x5f\xd1\x2b\x2b\x60\x93\xd5\x0a\x53\x75\x49\xc5\x9c\xb8\x73\x80\x03\x55\xb1\x0b\xc1\x76\xa5\x52\x14\x45\x09\xa9\x65\x4d\x21\xcf\x68\x67\x46\xbc\x1c\x38\xbf\x3d\x35\x23\xc9\x92\x25\xd9\x0b\xb9\x44\x5f\x40\x9a\x9e\x9e\xee\xa7\xbb\x9f\xe9\x76\xef\x93\x93\x09\xee\xdc\x13\xea\x20\x7d\x84\x7b\x5f\xc4\x46\x0f\x66\x02\x41\xc6\x44\x80\x08\x38\x49\x25\x48\x06\x12\x85\x04\x12\x81\x0f\x73\xf2\x88\x14\xa6\xc7\x57\x10\x33\x21\x9d\x94\x71\x09\x3e\x47\xf0\x1f\x7d\x92\xf8\xf7\x09\x1a\xc6\x3f\xc7\xde\xf4\xb7\xcb\x6b\x6f\x7a\x17\x2c\x42\xea\x2f\xd0\xb5\x5e\xf7\x7b\xbd\x3d\x67\x69\x18\x18\xc4\x0c\x39\xef\x0f\xe0\x55\xe9\xbb\xb9\x01\xab\x12\xff\xc7\xcc\x3b\x9d\x82\x4d\x11\x86\x70\x7b\x7b\x08\x32\x46\x0a\x6a\x07\x98\xd6\xaf\x26\x0c\x8f\x76\x0e\x0e\x21\x22\xb0\x34\x8c\x4c\xf8\x73\xec\x0f\x8c\x57\x03\x00\x20\xf0\x25\xfc\xfc\x33\xcc\x26\xe3\xb3\x53\x38\xda\x39\x30\x66\x6a\x79\xa4\xd7\xac\x96\x39\xda\xf2\x91\xb6\xfc\xc6\x16\xb7\x70\x63\x4b\x90\x64\x81\x2c\x93\xea\xc5\x86\x80\x2d\x16\x3e\x0d\xc1\xe7\x73\x71\xab\x95\xd8\x31\x9c\x5f\x4e\xa6\xf0\x06\xb6\xad\x76\xbb\xfa\x2d\x7f\xce\x99\x90\xc0\x38\x78\x57\x90\xd1\x10\xb9\x06\x2b\xdf\x95\xc2\xd5\xe5\x75\xbe\x4b\x1d\xe7\xea\xb7\xfc\x51\x08\x6a\x13\x1a\x7b\xb6\x3d\xe3\x44\x22\xa7\xbe\x24\x8f\x98\xbc\x7c\x86\x17\x96\x81\x48\x31\x20\xd1\x8b\x82\x4a\xbb\x05\xca\xee\x3c\x28\xa2\xf2\x33\xb7\x46\x68\x43\x84\xe4\x24\x90\x0d\xcd\x97\x34\x79\x01\x7c\xc6\x20\x93\x08\x22\xbb\x2f\x11\x20\x91\xd6\xac\xc3\x2f\xb2\x20\x40\x0c\x45\xae\xec\xbb\x56\xf6\x3d\x23\xd8\xd4\x05\x27\x8c\xee\x4a\x60\x99\x4c\x33\x65\xcf\x0b\x08\xe9\xcb\x4c\xc0\x02\x85\x0a\x4b\xa1\x40\xc2\xd4\xfb\x7a\x7a\x39\xcb\xe1\x29\xf0\x77\x8b\x6f\x3f\x84\x62\x9a\xcb\x03\xa1\x20\x30\x60\x34\x14\x9f\xe1\x77\xe4\x0c\x22\xc6\x81\xb2\x32\x9e\xf9\x51\x36\x1c\x5f\x7e\xfd\x3a\xfe\x76\x02\xe3\xeb\xb3\xc9\x9a\x9e\xd3\xc2\xe7\xd2\xe1\x27\x22\x63\x1d\x77\xf0\x23\xa9\xe2\x52\x7a\x1f\x11\x4a\x44\x8c\xc2\xd0\x49\xa6\xf5\xe2\x33\x91\x30\x34\x96\x86\xf1\xe4\x13\x79\x17\x31\xbe\x4a\xc8\x56\x6a\x97\xbe\xda\x73\x09\xfb\xab\xe4\x5e\xb9\x59\x94\x05\x98\xed\x6c\x1d\x81\xd2\x4e\xe8\xbc\x4b\x5d\xe1\xbb\xf6\xba\xb6\xac\xb2\x73\x54\x7b\x57\x79\x67\xe6\x36\x27\x02\x3f\x76\xea\x3b\x54\x6b\xd4\x54\x34\xfc\x12\xf7\xfc\xb0\x88\xe8\x3f\x95\xb0\x90\x3e\x97\x77\x52\xb8\x56\x3f\xf4\x25\xc2\x9f\xff\x24\x06\x5a\xe4\x29\x26\x09\x42\x5e\xb0\x21\x5b\x19\xd8\x82\xd1\x9b\xfc\x7d\x36\xf9\x17\xd8\xf8\xbd\x46\x11\x6b\xc9\x42\x03\xb0\x7f\x6f\x1a\x0c\x0d\x83\xd7\x76\x54\x4b\x1c\x45\x96\x48\xd7\xfa\xa5\x42\xa8\x0e\x97\x7a\xfa\x9a\x8e\x8e\xc0\x09\xf1\xd1\x91\x41\xea\x34\x4e\x72\x1a\x27\x0d\xe0\x48\x8b\xd2\x2c\x49\xe0\xe0\x68\x67\xf8\xee\xa3\x0b\xf0\x3a\x61\xc8\xa5\x35\x0c\x1d\xc9\xb4\xae\x19\x69\xd8\x85\xf8\xbb\x72\xe0\x47\x71\x27\xa2\xe2\xfd\xa2\x60\xac\x7e\xbf\x79\x36\xd8\x1d\x29\x30\x18\x94\xc9\x6b\xae\xd9\x73\xcf\xd1\x7f\xe8\x02\x41\x24\x88\x29\x0c\x8b\x14\xa1\x79\x58\x38\xca\x8c\xd3\x36\x34\xf5\xa2\xbc\x7b\xe2\x7e\x9a\x62\x55\x9c\x3d\xf0\x28\x30\xae\x69\x97\x81\xc8\x52\xcd\x97\x13\xef\xcc\xfb\x36\x85\x30\xe3\x2a\xeb\x8b\x3c\x1e\x41\x2c\x65\x3a\x72\x9c\x8c\x92\xe7\x2f\x42\xfa\xc1\x03\x3e\x07\xb1\x4f\xe7\xf8\x25\x60\x0b\xc7\x77\x7e\xfa\xeb\x5f\xfe\x76\xd0\x5d\xf3\xc5\x75\xd6\x9d\xab\xc5\x01\x75\x79\x95\xda\xaa\xb0\x7f\xbb\x18\x9f\x75\x15\xbb\xb5\xbf\x62\x5c\xdb\x0e\x62\x92\x84\xe5\x6d\xd4\x4c\xf7\xe2\xba\x69\x86\xab\xa2\xd9\x0e\xed\x3b\x6d\x7e\xf8\x6f\x6d\xfc\x3f\xd9\xd6\xa2\x93\x2b\xef\xc4\xb5\x3e\xe9\x8f\x92\xfb\x29\x98\x0f\x24\x49\xc0\x56\x61\xb4\xad\x35\x31\x13\xbc\x6f\x79\xd5\xab\xac\x80\xf5\xc5\x86\xd6\xeb\xd3\xc9\xec\x62\x5a\x96\x62\x2b\xaa\xf9\xb2\xee\x52\x3e\x4a\xe4\x25\x9e\x2c\x08\x32\xce\x31\x2c\x4a\xe6\x7f\xc9\xef\x05\x46\xed\xba\xc8\xcd\x56\x75\xd1\x83\x94\xb3\x00\x85\x50\xf7\x5c\xb6\x40\x2a\x85\x91\xf3\xaf\x72\xb4\xb7\xba\xa2\x8c\x82\x88\x03\x5f\x20\x98\xd6\xd0\x04\x52\xf9\xb9\x37\xda\x83\x8a\x48\xaa\x63\x54\xc8\x75\x7c\xfb\xd6\xeb\xd0\x71\x46\x0e\x2c\xbb\xc4\x94\x03\xae\xf5\xda\xde\x77\xb3\x7f\xbb\xec\x90\x57\x0e\x76\xcb\x0f\x6b\xf2\x22\x26\x91\x84\x8a\x62\x0f\x0f\x57\xff\x16\x49\xd9\x65\xcb\xf1\xb9\x77\x71\xe2\x0e\xdf\xa5\xa5\xd6\xf5\x74\xa9\xd2\x15\xff\x4e\x55\xf5\x6e\xac\x4b\xd7\x64\x7a\xed\x1d\xbf\x57\x59\xbc\x11\x64\xd3\x3a\x30\x37\x5f\x24\xba\x22\x5d\x17\x4c\xb3\x6a\xb8\x35\x03\x1f\xae\x51\xaf\x3e\xf9\xa0\x1b\x57\x5d\xe4\x7b\x5b\xce\x7f\x1d\xf6\xf6\xdc\xa5\xf9\x2e\x3f\xd2\x2e\x3d\x3a\xf8\xdb\xfd\xd0\x14\xf2\xc7\xfc\xd0\x59\xdb\xe9\x47\x71\xfe\x47\xfc\xe8\x8c\x68\x51\xd4\x3f\x70\xa5\x2c\xfd\x3f\xe6\x4d\x49\xa6\x9d\x0e\x55\x86\x7c\xc4\x27\x7b\xb0\x2e\xd6\x55\x4a\x17\x9e\xdb\x57\xb3\x5a\x25\xba\x7e\x9f\xaf\x67\x0e\x26\xb5\x78\xeb\x89\xae\x4b\xb0\xe6\xc2\x8a\x5d\x67\xf4\x81\xb2\x27\xba\x62\xb0\x11\x58\x43\x73\xbb\x2a\x14\x7e\x60\xe8\xc6\xc1\xc8\x31\x37\x1b\x75\x60\x16\x90\xbf\xbd\xad\x2d\x69\x6e\x6d\x44\xc3\x58\x33\xe6\x94\x73\xc6\x47\x7a\x1c\xa3\x88\xa1\x6a\x2a\x52\xce\x1e\x49\x88\xe0\x37\x86\xb2\x62\x94\xfe\x92\xdb\x9a\xdb\x19\x91\xfa\xc8\x5c\xc6\xa6\x4e\x76\xc5\xb7\x91\x3d\xfc\x69\x69\xb4\x18\xa2\x2e\x99\x7f\x1a\xd9\xfb\x75\xb9\x9c\xe0\xea\x62\xfa\x4b\x43\x2a\xe7\xae\xba\x94\xfe\xa2\xa5\x8c\x1e\x1c\xc7\x18\x3c\xe8\x7e\x09\x51\x8f\x85\xe5\x00\x26\x20\xe2\x6c\x01\xf7\x99\x78\xb9\x67\xcf\xbf\xb4\x5d\xb9\xbb\x1a\x4f\xcf\x5d\xab\x2f\x5f\x52\x54\x23\x71\xb1\x73\xb0\x59\x92\xa3\x9f\xa4\xbe\x8c\x3b\xca\x42\x8b\xc0\x41\xad\xa9\x7e\x7b\x03\x8e\x7e\x98\x10\xfa\x00\x76\xb4\x69\xcb\xa0\x8e\x71\xbd\x89\x71\x4d\xd3\xd8\x54\x83\xf9\x61\xee\xbf\xc1\x2c\xbc\x6b\x64\x40\x73\x2e\x29\xc8\xba\x04\x8b\x44\x25\x2a\x2b\xb4\x32\x81\x42\x8d\xbe\x51\xe2\xcf\x0b\xd9\x3e\xc7\x00\xa9\x84\x71\x92\x12\x8a\xf0\x88\x5c\x10\x46\x85\xea\x71\x77\xe5\xaa\x3b\xb5\xf5\x24\xbd\x60\x1c\x07\x65\x5b\x52\xea\xdc\xc9\xc1\x10\x32\x54\x6f\x6f\x30\xe7\x98\xaa\x9b\xca\x46\xd8\xb5\x25\xec\x36\x3a\x94\x4d\x30\xd8\xd5\xd0\xb6\x6a\x02\x5b\x0e\xee\xeb\x6c\x6d\xe1\xa5\xf3\xa9\x6b\xb6\x2d\x7b\xf0\xad\x2d\x96\x9e\xa3\xdb\xad\xca\xca\x8a\x8f\x0e\xd3\xcd\xc6\xbf\xc3\xf5\x86\x01\xf5\xa6\x77\xcd\xe4\x6d\xbb\x22\xb2\x01\x8c\x0b\x0f\x3e\xb5\xe9\x62\x7b\x23\xb9\xb3\x53\x5f\xca\xcb\x78\xd3\xe8\xb0\xb5\xc7\x2c\x7e\xde\x59\xb0\x10\x3f\x03\xc7\x28\x13\x7a\x9c\x61\xf5\x5f\x77\x8a\xfe\xaf\x22\xcc\x0d\x11\x80\xaa\xa1\x54\xbb\xc1\x5c\xe3\x90\x0b\xef\xe6\xd7\xdb\xa5\x59\xc5\x69\x83\x96\x88\x18\xff\x09\x00\x00\xff\xff\x9e\x87\xca\xa0\x68\x14\x00\x00")

func waitForItShBytes() ([]byte, error) {
	return bindataRead(
		_waitForItSh,
		"wait-for-it.sh",
	)
}

func waitForItSh() (*asset, error) {
	bytes, err := waitForItShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wait-for-it.sh", size: 5224, mode: os.FileMode(420), modTime: time.Unix(1595241057, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wait-for-it.sh": waitForItSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wait-for-it.sh": &bintree{waitForItSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
